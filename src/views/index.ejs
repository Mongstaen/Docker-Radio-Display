<!DOCTYPE html>
<head>
  <title>Radio studio monitor</title>
  <link rel="preconnect" href="https://fonts.gstatic.com" />
  <link
    href="https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap"
    rel="stylesheet"
  />
  <link rel="stylesheet" type="text/css" href="style.css" />
</head>
<body>
  <div id="app">
    <div class="left">
      <div id="clock-container"></div>
      <div id="countdown-container"></div>

      <div class="nowplaying">
        <h1 id="artistText"></h1>
        <h1 id="titleText"></h1>
        <h2 id="durationText" style="display: none;"></h2>
      </div>
    </div>

    <div class="container">
      <% if (displayMicrophone) { %>
      <div id="microphoneDiv" class="right inactiveMicrophone">
        <h1 id="microphoneText">MIC OFF</h1>
      </div>
      <% } %> <% if (displayAutomation) { %>
      <div id="automationDiv" class="right inactiveAutomation">
        <h1 id="automationText">Assist Mode</h1>
      </div>
      <% } %> <% if (displayEOF) { %>
      <div id="eofDiv" class="right inactiveEOF">
        <h1 id="eofText">EOF</h1>
      </div>
      <% } %>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const now = new Date();
    let timeDiffC = null;
    const timeCorr = 500;
    //let lastMinute = now.getMinutes(); // Variable to track the last minute value

    function parseTimeStringToMillis(timeString) {
      const [time, millis] = timeString.split(".");
      const [hours, minutes, seconds] = time.split(":").map(Number);
      return (
        hours * 3600000 + minutes * 60000 + seconds * 1000 + Number(millis)
      );
    }

    function updateBClock() {
      const clockContainer = document.getElementById("clock-container");
      const countdownContainer = document.getElementById("countdown-container");

      const now = new Date();
      const currentSysTime =
        now.getHours() * 3600000 +
        now.getMinutes() * 60000 +
        now.getSeconds() * 1000 +
        now.getMilliseconds();
      const currentSysTimeAdj = currentSysTime - timeDiffC;

      const hours = Math.floor((currentSysTimeAdj / (1000 * 60 * 60)) % 24);
      const minutes = Math.floor((currentSysTimeAdj / (1000 * 60)) % 60);
      const seconds = Math.floor((currentSysTimeAdj / 1000) % 60);

      // Update time on the clock
      const formattedTime = `<div class="innerClock"><p class="time">${String(
        hours
      ).padStart(2, "0")}:${String(minutes).padStart(
        2,
        "0"
      )}</p><p class="seconds">${String(seconds).padStart(2, "0")}</p></div>`;
      clockContainer.innerHTML = formattedTime;
      updateDots(seconds, false); // Update dots without resetting on each second
    }

    function updateDots(currentSecond) {
      const clockContainer = document.getElementById("clock-container");

      // Remove existing dots before adding new ones
      const existingDots = document.querySelectorAll(".dot");
      existingDots.forEach((dot) => dot.remove());

      const radius = 250; // radius for the dots (adjust as needed)
      const angleStep = 360 / 60; // 60 dots (for seconds)
      const radiusM = 270; // radius for the Hour-dots (adjust as needed)
      const angleStepM = 360 / 12; // 12 dots (for hours)

      // Add hour dots (outer)
      for (let i = 0; i < 12; i++) {
        const angleM = i * angleStepM - (84.5 + angleStep);
        const x = Math.cos((angleM * Math.PI) / 180) * radiusM;
        const y = Math.sin((angleM * Math.PI) / 180) * radiusM;

        const dot = document.createElement("div");
        dot.classList.add("dot", "hour-dot");
        dot.style.left = `calc(50% + ${x}px)`;
        dot.style.top = `calc(50% + ${y}px)`;
        dot.style.backgroundColor = "red"; // Highlight the current second with red
        clockContainer.appendChild(dot);
      }

      // Add second dots (inner)
      for (let i = 0; i < 60; i++) {
        const angle = i * angleStep - (84.5 + angleStep);
        const x = Math.cos((angle * Math.PI) / 180) * radius;
        const y = Math.sin((angle * Math.PI) / 180) * radius;

        const dot = document.createElement("div");
        dot.classList.add("dot", "second-dot");
        dot.style.left = `calc(50% + ${x}px)`;
        dot.style.top = `calc(50% + ${y}px)`;
        if (i <= currentSecond) {
          dot.style.backgroundColor = "red"; // Highlight the current second with red
        }

        clockContainer.appendChild(dot);
      }
    }

    updateBClock();
    setInterval(updateBClock, 50);

    artistText = document.getElementById("artistText");
    titleText = document.getElementById("titleText");
    durationText = document.getElementById("durationText");
    microphoneDiv = document.getElementById("microphoneDiv");
    microphoneText = document.getElementById("microphoneText");
    automationDiv = document.getElementById("automationDiv");
    automationText = document.getElementById("automationText");
    eofDiv = document.getElementById("eofDiv");
    eofText = document.getElementById("eofText");

    let durationInterval = null;
    let currentDurationSeconds = 0;

    function parseTimeToSeconds(timeString) {
      const parts = timeString.split(':');
      const hours = parseInt(parts[0], 10);
      const minutes = parseInt(parts[1], 10);
      const seconds = parseInt(parts[2], 10);
      return hours * 3600 + minutes * 60 + seconds;
    }

    function formatSecondsToTime(totalSeconds) {
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const seconds = totalSeconds % 60;
      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    function startDurationCountdown(durationString) {
      // Clear any existing interval
      if (durationInterval) {
        clearInterval(durationInterval);
      }
      
      // Parse duration and start countdown
      currentDurationSeconds = parseTimeToSeconds(durationString);
      
      if (currentDurationSeconds > 0) {
        durationText.style.display = 'block';
        durationText.innerText = formatSecondsToTime(currentDurationSeconds);
        
        durationInterval = setInterval(() => {
          currentDurationSeconds--;
          
          if (currentDurationSeconds <= 0) {
            clearInterval(durationInterval);
            durationText.style.display = 'none';
            durationInterval = null;
          } else {
            durationText.innerText = formatSecondsToTime(currentDurationSeconds);
          }
        }, 1000);
      }
    }

    // Fetch initial data when the page loads
    document.addEventListener("DOMContentLoaded", function () {
      fetch("/lastUpdate")
        .then((response) => {
          if (!response.ok) {
            throw new Error(
              `Fetch error: ${response.status} ${response.statusText}`
            );
          }
          return response.json();
        })
        .then((data) => {
          // Update the UI with the retrieved data
          if (data.artist) artistText.innerText = data.artist;
          if (data.title) titleText.innerText = data.title;
          if (data.duration) startDurationCountdown(data.duration);

          if (data.microphone === "true") {
            microphoneText.innerText = "MIC ON";
            microphoneDiv.className = "right activeMicrophone";
          } else {
            microphoneText.innerText = "MIC OFF";
            microphoneDiv.className = "right inactiveMicrophone";
          }

          if (data.automation === "true") {
            automationText.innerText = "Auto Mode";
            automationDiv.className = "right activeAutomation";
          } else {
            automationText.innerText = "Assist Mode";
            automationDiv.className = "right inactiveAutomation";
          }

          if (data.eof === "true") {
            endOfFile();
          }
        })
        .catch((error) => console.error("Error fetching initial data:", error));
    });
    var socket = io();
    console.log(socket);

    socket.on("artist", function (artist) {
      artistText.innerText = artist;
    });

    socket.on("title", function (title) {
      titleText.innerText = title;
    });

    socket.on("duration", function (duration) {
      startDurationCountdown(duration);
    });

    socket.on("microphone", function (microphone) {
      if (microphone) {
        microphoneText.innerText = "MIC ON";
        microphoneDiv.className = "right activeMicrophone";
      } else {
        microphoneText.innerText = "MIC OFF";
        microphoneDiv.className = "right inactiveMicrophone";
      }
    });

    socket.on("automation", function (automation) {
      if (automation) {
        automationText.innerText = "Auto Mode";
        automationDiv.className = "right activeAutomation";
      } else {
        automationText.innerText = "Assist Mode";
        automationDiv.className = "right inactiveAutomation";
      }
    });
    socket.on("eof", function (eof) {
      if (eof === "true") {
        endOfFile();
        //eof = 'false';
      }
    });

    // TODO: Implement EOF function.

    function sleep(ms) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }
    async function endOfFile() {
      let number = 9;
      while (number != 0) {
        eofText.innerText = number;
        if (number % 2 == 0) {
          eofDiv.className = "right inactiveEOF";
        } else {
          eofDiv.className = "right activeEOF";
        }
        await sleep(1000);
        number -= 1;
      }
      eofText.innerText = "EOF";
      eofDiv.className = "right inactiveEOF";
    }
  </script>
</body>
